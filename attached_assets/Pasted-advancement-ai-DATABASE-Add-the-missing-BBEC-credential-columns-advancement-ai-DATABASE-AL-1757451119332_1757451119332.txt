advancement-ai::DATABASE=> -- Add the missing BBEC credential columns
advancement-ai::DATABASE=> ALTER TABLE users ADD COLUMN IF NOT EXISTS bbec_username VARCHAR(255);
NOTICE:  column "bbec_username" of relation "users" already exists, skipping
ALTER TABLE
advancement-ai::DATABASE=> ALTER TABLE users ADD COLUMN IF NOT EXISTS bbec_password VARCHAR(255);
NOTICE:  column "bbec_password" of relation "users" already exists, skipping
ALTER TABLE
advancement-ai::DATABASE=> -- Verify the columns were added
advancement-ai::DATABASE=> \d users
                                    Table "public.users"
      Column       |            Type             | Collation | Nullable |      Default
-------------------+-----------------------------+-----------+----------+-------------------
 id                | character varying           |           | not null | gen_random_uuid()
 email             | character varying           |           |          |
 first_name        | character varying           |           |          |
 last_name         | character varying           |           |          |
 profile_image_url | character varying           |           |          |
 username          | text                        |           |          |
 password          | text                        |           |          |
 buid              | text                        |           |          |
 bbec_guid         | text                        |           |          |
 is_active         | boolean                     |           |          | true
 created_at        | timestamp without time zone |           | not null | now()
 updated_at        | timestamp without time zone |           | not null | now()
 bbec_username     | text                        |           |          |
 bbec_password     | text                        |           |          |
Indexes:
    "users_pkey" PRIMARY KEY, btree (id)
    "users_email_unique" UNIQUE CONSTRAINT, btree (email)
    "users_username_unique" UNIQUE CONSTRAINT, btree (username)
Referenced by:
    TABLE "ai_jobs" CONSTRAINT "ai_jobs_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id)
    TABLE "ai_prompt_settings" CONSTRAINT "ai_prompt_settings_user_id_users_id_fk" FOREIGN KEY (user_id) REFERENCES users(id)
    TABLE "interactions" CONSTRAINT "interactions_user_id_users_id_fk" FOREIGN KEY (user_id) REFERENCES users(id)
    TABLE "itineraries" CONSTRAINT "itineraries_user_id_users_id_fk" FOREIGN KEY (user_id) REFERENCES users(id)
    TABLE "prospects" CONSTRAINT "prospects_primary_prospect_manager_id_users_id_fk" FOREIGN KEY (primary_prospect_manager_id) REFERENCES users(id)
    TABLE "prospects" CONSTRAINT "prospects_prospect_manager_id_users_id_fk" FOREIGN KEY (prospect_manager_id) REFERENCES users(id)
    TABLE "python_scripts" CONSTRAINT "python_scripts_owner_id_fkey" FOREIGN KEY (owner_id) REFERENCES users(id)
    TABLE "script_executions" CONSTRAINT "script_executions_triggered_by_fkey" FOREIGN KEY (triggered_by) REFERENCES users(id)
    TABLE "script_versions" CONSTRAINT "script_versions_created_by_fkey" FOREIGN KEY (created_by) REFERENCES users(id)
    TABLE "user_roles" CONSTRAINT "user_roles_assigned_by_users_id_fk" FOREIGN KEY (assigned_by) REFERENCES users(id)
    TABLE "user_roles" CONSTRAINT "user_roles_user_id_users_id_fk" FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
    TABLE "user_settings" CONSTRAINT "user_settings_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
    TABLE "voice_recordings" CONSTRAINT "voice_recordings_user_id_users_id_fk" FOREIGN KEY (user_id) REFERENCES users(id)
